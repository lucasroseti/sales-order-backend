name: Release on Main PR

on:
  pull_request:
    branches:
      - main
    types: [closed]

permissions:
  contents: write
  pull-requests: read
  issues: read

jobs:
  release:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Extract version from branch name
        id: extract-version
        run: |
          # Extrai a vers칚o do nome da branch (release/1.0.2 -> 1.0.2)
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          echo "Branch name: $BRANCH_NAME"
          
          if [[ $BRANCH_NAME =~ ^release/([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "Extracted version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Branch name does not match release pattern"
            exit 1
          fi

      - name: Get current version from package.json
        id: current-version
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version in package.json: $CURRENT_VERSION"

      - name: Create tag
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          
          # Configura o git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Verifica se a tag j치 existe
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists"
          else
            # Cria a tag
            git tag -a "v$VERSION" -m "Release version $VERSION"
            git push origin "v$VERSION"
            echo "Created and pushed tag v$VERSION"
          fi

#       - name: Create or update Changelog
#         run: |
#           VERSION="${{ steps.extract-version.outputs.version }}"
#           PR_NUMBER="${{ github.event.pull_request.number }}"
#           PR_TITLE="${{ github.event.pull_request.title }}"
#           PR_URL="${{ github.event.pull_request.html_url }}"
#           CURRENT_DATE=$(date +"%Y-%m-%d")
          
#           # Escape do conte칰do da PR para uso seguro em bash
#           PR_BODY=$(cat << 'EOF'
# ${{ github.event.pull_request.body }}
# EOF
# )
          
#           # Salva o PR body em um arquivo tempor치rio para evitar problemas com caracteres especiais
#           echo "$PR_BODY" > pr_body.tmp
          
#           # Se o arquivo Changelog.md n칚o existir, cria um novo
#           if [ ! -f "Changelog.md" ]; then
#             echo "# Changelog" > Changelog.md
#             echo "" >> Changelog.md
#             echo "All notable changes to this project will be documented in this file." >> Changelog.md
#             echo "" >> Changelog.md
#           fi
          
#           # Cria um arquivo tempor치rio com a nova entrada
#           echo "# $VERSION" > new_entry.tmp
#           echo "" >> new_entry.tmp
#           echo "This release includes:" >> new_entry.tmp
#           echo "" >> new_entry.tmp
#           cat pr_body.tmp >> new_entry.tmp
#           echo "" >> new_entry.tmp
#           echo "[游댍 See PR]($PR_URL)" >> new_entry.tmp
#           echo "" >> new_entry.tmp
#           echo "---" >> new_entry.tmp
#           echo "" >> new_entry.tmp
          
#           # Cria o novo changelog
#           echo "# Changelog" > temp_changelog.md
#           echo "" >> temp_changelog.md
#           echo "All notable changes to this project will be documented in this file." >> temp_changelog.md
#           echo "" >> temp_changelog.md
#           cat new_entry.tmp >> temp_changelog.md
          
#           # Adiciona o conte칰do existente (pula as primeiras 4 linhas do cabe칞alho)
#           if [ -f "Changelog.md" ]; then
#             tail -n +5 Changelog.md >> temp_changelog.md 2>/dev/null || true
#           fi
          
#           # Substitui o arquivo original
#           mv temp_changelog.md Changelog.md
          
#           # Remove arquivos tempor치rios
#           rm -f pr_body.tmp new_entry.tmp
          
#           echo "Changelog updated successfully"

#       - name: Commit changelog changes
#         run: |
#           VERSION="${{ steps.extract-version.outputs.version }}"
          
#           # Configura o git
#           git config --local user.email "action@github.com"
#           git config --local user.name "GitHub Action"
          
#           # Verifica se h치 mudan칞as no changelog
#           if git diff --quiet Changelog.md; then
#             echo "No changes to Changelog.md"
#           else
#             # Adiciona e comita as mudan칞as
#             git add Changelog.md
#             git commit -m "docs: update changelog for version $VERSION"
#             git push
#             echo "Changelog committed and pushed"
#           fi

#       - name: Create GitHub Release
#         uses: softprops/action-gh-release@v1
#         with:
#           tag_name: v${{ steps.extract-version.outputs.version }}
#           name: Release v${{ steps.extract-version.outputs.version }}
#           body: |
#             This release includes:
            
#             ${{ github.event.pull_request.body }}
            
#             [游댍 See PR](${{ github.event.pull_request.html_url }})
#           draft: false
#           prerelease: false 